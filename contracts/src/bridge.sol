// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.4. SEE SOURCE BELOW. !!
pragma solidity >=0.7.0 <0.9.0;
pragma experimental ABIEncoderV2;

interface BRIDGE {
    event Deposit(
        uint8 destinationDomainID,
        bytes32 resourceID,
        uint64 depositNonce,
        address indexed user,
        bytes data,
        bytes handlerResponse
    );
    event FailedHandlerExecution(bytes lowLevelData);
    event Paused(address account);
    event ProposalEvent(
        uint8 originDomainID,
        uint64 depositNonce,
        uint8 status,
        bytes32 dataHash
    );
    event ProposalVote(
        uint8 originDomainID,
        uint64 depositNonce,
        uint8 status,
        bytes32 dataHash
    );
    event RelayerAdded(address relayer);
    event RelayerRemoved(address relayer);
    event RelayerThresholdChanged(uint256 newThreshold);
    event RoleGranted(
        bytes32 indexed role,
        address indexed account,
        address indexed sender
    );
    event RoleRevoked(
        bytes32 indexed role,
        address indexed account,
        address indexed sender
    );
    event Unpaused(address account);

    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);

    function MAX_RELAYERS() external view returns (uint256);

    function RELAYER_ROLE() external view returns (bytes32);

    function _depositCounts(uint8) external view returns (uint64);

    function _domainID() external view returns (uint8);

    function _expiry() external view returns (uint40);

    function _fee() external view returns (uint128);

    function _relayerThreshold() external view returns (uint8);

    function _resourceIDToHandlerAddress(bytes32)
        external
        view
        returns (address);

    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    function getRoleMember(bytes32 role, uint256 index)
        external
        view
        returns (address);

    function getRoleMemberCount(bytes32 role) external view returns (uint256);

    function getRoleMemberIndex(bytes32 role, address account)
        external
        view
        returns (uint256);

    function grantRole(bytes32 role, address account) external;

    function hasRole(bytes32 role, address account)
        external
        view
        returns (bool);

    function isValidForwarder(address) external view returns (bool);

    function paused() external view returns (bool);

    function renounceRole(bytes32 role, address account) external;

    function revokeRole(bytes32 role, address account) external;

    function _hasVotedOnProposal(
        uint72 destNonce,
        bytes32 dataHash,
        address relayer
    ) external view returns (bool);

    function isRelayer(address relayer) external view returns (bool);

    function renounceAdmin(address newAdmin) external;

    function adminPauseTransfers() external;

    function adminUnpauseTransfers() external;

    function adminChangeRelayerThreshold(uint256 newThreshold) external;

    function adminAddRelayer(address relayerAddress) external;

    function adminRemoveRelayer(address relayerAddress) external;

    function adminSetResource(
        address handlerAddress,
        bytes32 resourceID,
        address tokenAddress
    ) external;

    function adminSetGenericResource(
        address handlerAddress,
        bytes32 resourceID,
        address contractAddress,
        bytes4 depositFunctionSig,
        uint256 depositFunctionDepositerOffset,
        bytes4 executeFunctionSig
    ) external;

    function adminSetBurnable(address handlerAddress, address tokenAddress)
        external;

    function adminSetDepositNonce(uint8 domainID, uint64 nonce) external;

    function adminSetForwarder(address forwarder, bool valid) external;

    function getProposal(
        uint8 originDomainID,
        uint64 depositNonce,
        bytes32 dataHash
    ) external view returns (S_0 memory);

    function _totalRelayers() external view returns (uint256);

    function adminChangeFee(uint256 newFee) external;

    function adminWithdraw(address handlerAddress, bytes memory data) external;

    function deposit(
        uint8 destinationDomainID,
        bytes32 resourceID,
        bytes memory data
    ) external payable;

    function voteProposal(
        uint8 domainID,
        uint64 depositNonce,
        bytes32 resourceID,
        bytes memory data
    ) external;

    function cancelProposal(
        uint8 domainID,
        uint64 depositNonce,
        bytes32 dataHash
    ) external;

    function executeProposal(
        uint8 domainID,
        uint64 depositNonce,
        bytes memory data,
        bytes32 resourceID,
        bool revertOnFail
    ) external;

    function transferFunds(address[] memory addrs, uint256[] memory amounts)
        external;
}

struct S_0 {
    uint8 _status;
    uint200 _yesVotes;
    uint8 _yesVotesTotal;
    uint40 _proposedBlock;
}
